[[language]]
name = "python"
language-servers = ["pylsp", "ruff-lsp"] # use pylsp-mypy for mypy
formatter = { command = "ruff", args = ["format", "-n", "-"]}
auto-format = true

[language-server.ruff-lsp]
command = "ruff-lsp"
config = { settings = { organizeImports = true,  lint.run = "onSave" } }

[[language]]
name = "fish"
formatter = { command = "fish_indent" }
auto-format = true

[language-server.efm]
command = "efm-langserver"

[[language]]
name = "php"
language-servers = [
  { name = "phpactor", except-features = ["format"]},
  { name = "phan", except-features = ["format"]},
  { name = "psalm", except-features = ["format"]},  
  { name = "efm", only-features = ["code-action", "diagnostics"]} # for phpstan
]
formatter = { command = "pretty-php", args = ["--psr12", "--preset", "laravel", "-"]}
auto-format = true

[language-server.phpactor]
command = "phpactor"
args = ["language-server"]

[language-server.phan]
command = "./vendor/bin/phan"
args = ["--language-server-on-stdin", "--output-mode", "json", "--no-color", "--no-progress-bar" ]

[language-server.psalm]
command = "./vendor/bin/psalm"
args = ["--language-server"]

[[language]]
name = "lua"
language-servers = [
  { name = "lua-language-server", except-features = ["format"]},  
  { name = "efm", only-features = ["diagnostics", "code-action"]} # for selene
]
formatter = { command = "stylua", args = ["-"]}
auto-format = true

[language-server.lua-language-server.config.Lua]
format.enable = false
runtime.version = "LuaJIT"
diagnostics.globals = ["vim"]
workspace.library = ["/usr/share/nvim/runtime/lua", "/usr/share/nvim/runtime/lua/vim", "/usr/share/nvim/runtime/lua/vim/lsp"]

[language-server.lua-language-server.config.Lua.hint]
enable = true
arrayIndex = "Enable"
setType = true
paramName = "All"
paramType = true
await = true

[[language]]
name = "rust"
auto-format = true

[language-server.rust-analyzer.config]
check.command = "clippy"
check.features = "all"

[[language]]
name = "dockerfile"
language-servers = ["docker-langserver",
  { name = "efm", only-features = ["code-action", "diagnostics"]} # for hadolint
]

[[language]]
name = "yaml"
file-types = ["yml", "yaml", { glob = "phpstan.neon" }]

[[language]]
name = "git-config"
file-types = [{ glob = "git/config" }, { glob = ".gitmodules" }, { glob = ".gitconfig" }, { glob = ".git/config" }, { glob = ".config/git/config" }]

[language-server.clangd]
command = "clangd"
args = ["--clang-tidy", "-j=5", "--malloc-trim"]

[[language]]
name = "c"
language-servers = [
  "clangd",
  { name = "efm", only-features = ["diagnostics"]} # gcc lints and cppcheck
]
file-types = ["c","h"]
auto-format = true

[[language]]
name = "bash"
formatter = { command = "shfmt", args = ["--indent", "2", "-"]}
auto-format = true

[[language]]
name = "pkgbuild"
formatter = { command = "shfmt", args = ["--indent", "2", "-"]}
auto-format = true

[[language]]
name = "mojo"
scope = "source.mojo"
file-types = ["mojo", "ðŸ”¥", { glob = ".pythonrc" } ]
shebangs = ["mojo"]
injection-regex = "mojo"
# roots = ["pyproject.toml", "setup.py", "poetry.lock", "pyrightconfig.json"]
comment-token = "#"
language-servers = [ "mojo-lsp-server" ]
formatter = { command = "ruff", args = ["format", "-n", "-"]}
auto-format = true
indent = { tab-width = 4, unit = "    " }
grammar = "python"

[language-server.mojo-lsp-server]
command = "mojo-lsp-server"

[language.debugger]
name = "mojo-lldb-dap"
transport = "stdio"
command = "mojo-lldb-dap"

[[language.debugger.templates]]
name = "binary"
request = "launch"
completion = [ { name = "binary", completion = "filename" } ]
args = { console = "internalConsole", program = "{0}", runInTerminal = false, initCommands = [ ] }
